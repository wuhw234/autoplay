# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'accounts.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from login import login, play
import PyQt5.QtCore
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (
    QAbstractItemView,
    QDialog,
    QDialogButtonBox,
    QFormLayout,
    QHBoxLayout,
    QLineEdit,
    QMainWindow,
    QMessageBox,
    QPushButton,
    QTableView,
    QVBoxLayout,
    QWidget,
    QComboBox,
    QCheckBox
)
from model import AccountsModel
import os
import os.path
from os import path

class Window(QMainWindow):
    """Main Window."""
    def __init__(self, parent=None):
        """Initializer."""
        super().__init__(parent)
        self.setWindowTitle("Account List")
        self.resize(480, 400)
        self.centralWidget = QWidget()
        self.setCentralWidget(self.centralWidget)
        self.layout = QHBoxLayout()
        self.centralWidget.setLayout(self.layout)
        self.accountsModel = AccountsModel()
        self.setupUI()
        self.mode = "Ranked Solo/Duo"
        self.primary = "Mid"
        self.secondary = "Top"
        self.autoPlay = True

    def setupUI(self):
        """Setup the main window's GUI."""
        # Create the table view widget
        self.table = QTableView()
        self.table.setModel(self.accountsModel.model)
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.table.resizeColumnsToContents()
        # Create buttons
        self.addButton = QPushButton("Add")
        self.addButton.clicked.connect(self.openAddDialog)
        self.deleteButton = QPushButton("Delete")
        self.deleteButton.clicked.connect(self.deleteAccount)
        self.playButton = QPushButton("Play on account")
        self.playButton.clicked.connect(self.playAccount)
        self.modeButton = QPushButton("Set Mode/Roles")
        self.modeButton.clicked.connect(self.setMode)

    
        # Lay out the GUI
        layout = QVBoxLayout()
        layout.addWidget(self.addButton)
        layout.addWidget(self.deleteButton)
        layout.addStretch()
        layout.addWidget(self.modeButton)
        layout.addWidget(self.playButton) #todo add feature that closes league window if there is one, add feature to make sure account is selected
        self.layout.addWidget(self.table)
        self.layout.addLayout(layout)

    def openAddDialog(self):
        """Open the Add Account dialog."""
        dialog = AddDialog(self)
        if dialog.exec() == QDialog.Accepted:
            self.accountsModel.addAccount(dialog.data)
            self.table.resizeColumnsToContents()

    def deleteAccount(self):
        """Delete the selected account from the database."""
        row = self.table.currentIndex().row()
        if row < 0:
            return
        messageBox = QMessageBox.warning(
            self,
            "Warning!",
            "Do you want to remove the selected account?",
            QMessageBox.Ok | QMessageBox.Cancel,
        )

        if messageBox == QMessageBox.Ok:
            self.accountsModel.deleteAccount(row)
    def setMode(self):
        getMode = AddMode(self)
        if getMode.exec() ==QDialog.Accepted:
            self.mode = getMode.mode
            self.primary = getMode.primary
            self.secondary = getMode.secondary
            self.autoPlay = getMode.autoPlay
    
    def playAccount(self):

        row = self.table.currentIndex().row()
        if row < 0:
            return
        username= self.table.model().data(self.table.model().index(row, 2))
        password= self.table.model().data(self.table.model().index(row, 3))

        if self.createFile() == True:
            if login(username, password):
                play(self.mode, self.primary, self.secondary, self.autoPlay)
                self.close()
            else:
                messageBox = QMessageBox.critical(
                self,
                "Error:",
                "Invalid account credentials",
                QMessageBox.Ok | QMessageBox.Cancel,
            
                )
            


        # self.logIn(username, password)
        # create function that takes username and password and logs in

    def createFile(self):
        if not path.exists("leaguepath.txt"):
            leaguePath = AddPath(self)
            if leaguePath.exec() == QDialog.Accepted:
                file = open("leaguepath.txt", "w")
                file.write(leaguePath.data)
                file.close()
            else:
                return
        
        #if path is invalid/not league path, throw warning, recall function
        file = open("leaguepath.txt", "r")
        leaguepath = file.read()
        try:
            os.startfile(leaguepath)
            
        except:
            file.close()
            os.remove("leaguepath.txt")
            messageBox = QMessageBox.critical(
            self,
            "Error:",
            "Enter a valid file path",
            QMessageBox.Ok | QMessageBox.Cancel,
            
            )
            if messageBox == QMessageBox.Ok:
                if not self.createFile():
                    return
            else:
                return

        file.close()
        return True
        
class AddPath(QDialog):
    """Add Path dialog."""
    def __init__(self, parent=None):
        """Initializer."""
        super().__init__(parent=parent)
        self.setWindowTitle("Enter Path to League Client")
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)
        self.resize(350, 100)
        self.data = ""

        self.setupUI()

    def setupUI(self):
        """Setup the Add Path dialog's GUI."""
        # Create line edits for data fields
        self.enterPath = QLineEdit()
        self.enterPath.setObjectName("Nickname")
        self.usernameField = QLineEdit()
        self.usernameField.setObjectName("Username")
        self.passwordField = QLineEdit()
        self.passwordField.setObjectName("Password")
        # Lay out the data fields
        layout = QFormLayout()
        layout.addRow("Path:", self.enterPath)
        self.layout.addLayout(layout)
        # Add standard buttons to the dialog and connect them
        self.buttonsBox = QDialogButtonBox(self)
        self.buttonsBox.setOrientation(Qt.Horizontal)
        self.buttonsBox.setStandardButtons(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel
        )
        self.buttonsBox.accepted.connect(self.accept)
        self.buttonsBox.rejected.connect(self.reject)
        self.layout.addWidget(self.buttonsBox)

    def accept(self):
        """Accept the data provided through the dialog."""
        self.data = ""
        if not self.enterPath.text():
                QMessageBox.critical(
                    self,
                    "Error!",
                    f"You must provide a path.",
                )
                self.data = None  # Reset .data
                return

        self.data = self.enterPath.text()

        if not self.data:
            return
        super().accept()

class AddMode(QDialog):
    """Add Path dialog."""
    def __init__(self, parent=None):
        """Initializer."""
        super().__init__(parent=parent)
        self.setWindowTitle("Set Mode and Role")
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)
        self.resize(400,200)
        self.primary = "Mid"
        self.secondary = "Top"
        self.gameMode = "Ranked Solo/Duo"
        self.autoPlay = True

        self.setupUI()

    def setupUI(self):
        """Setup the Add Path dialog's GUI."""
        # Create line edits for data fields
        self.primaryBox = QComboBox()
        self.primaryBox.addItem("Mid")
        self.primaryBox.addItem("Top")
        self.primaryBox.addItem("Jungle")
        self.primaryBox.addItem("ADC")
        self.primaryBox.addItem("Support")

        self.gameModeBox = QComboBox()
        self.gameModeBox.addItem("Ranked Solo/Duo")
        self.gameModeBox.addItem("Draft Pick")
        self.gameModeBox.addItem("Blind Pick")
        self.gameModeBox.addItem("Ranked Flex")
     
        self.secondaryBox = QComboBox()
        self.secondaryBox.addItem("Top")
        self.secondaryBox.addItem("Mid")
        self.secondaryBox.addItem("Jungle")
        self.secondaryBox.addItem("ADC")
        self.secondaryBox.addItem("Support")

        self.playBox = QCheckBox()
        self.playBox.setText("Automatically start playing after login")
        self.playBox.setChecked(True)

        # Lay out the data fields
        layout = QFormLayout()
        layout.addRow("Mode:", self.gameModeBox)
        layout.addRow("Primary Role:", self.primaryBox)
        layout.addRow("Secondary Role:", self.secondaryBox)
        layout.addRow(self.playBox)
        self.layout.addLayout(layout)
        # Add standard buttons to the dialog and connect them
        self.buttonsBox = QDialogButtonBox(self)
        self.buttonsBox.setOrientation(Qt.Horizontal)
        self.buttonsBox.setStandardButtons(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel
        )
        self.buttonsBox.accepted.connect(self.accept)
        self.buttonsBox.rejected.connect(self.reject)
        self.layout.addWidget(self.buttonsBox)

    def accept(self):
        """Accept the data provided through the dialog."""
        if self.secondaryBox.currentText() == self.primaryBox.currentText():
                QMessageBox.critical(
                    self,
                    "Error!",
                    f"Primary role cannot be the same as secondary role!",
                )
                return
        self.primary = self.primaryBox.currentText()
        self.secondary = self.secondaryBox.currentText()
        self.mode = self.gameModeBox.currentText()
        self.autoPlay = self.playBox.isChecked()

        super().accept()

class AddDialog(QDialog):
    """Add Account dialog."""
    def __init__(self, parent=None):
        """Initializer."""
        super().__init__(parent=parent)
        self.setWindowTitle("Add Account")
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)
        self.data = None

        self.setupUI()

    def setupUI(self):
        """Setup the Add Account dialog's GUI."""
        # Create line edits for data fields
        self.nicknameField = QLineEdit()
        self.nicknameField.setObjectName("Nickname")
        self.usernameField = QLineEdit()
        self.usernameField.setObjectName("Username")
        self.passwordField = QLineEdit()
        self.passwordField.setObjectName("Password")
        # Lay out the data fields
        layout = QFormLayout()
        layout.addRow("Nickname:", self.nicknameField)
        layout.addRow("Username:", self.usernameField)
        layout.addRow("Password:", self.passwordField)
        self.layout.addLayout(layout)
        # Add standard buttons to the dialog and connect them
        self.buttonsBox = QDialogButtonBox(self)
        self.buttonsBox.setOrientation(Qt.Horizontal)
        self.buttonsBox.setStandardButtons(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel
        )
        self.buttonsBox.accepted.connect(self.accept)
        self.buttonsBox.rejected.connect(self.reject)
        self.layout.addWidget(self.buttonsBox)

    def accept(self):
        """Accept the data provided through the dialog."""
        self.data = []
        for field in (self.nicknameField, self.usernameField, self.passwordField):
            if not field.text():
                QMessageBox.critical(
                    self,
                    "Error!",
                    f"You must provide an account's {field.objectName()}",
                )
                self.data = None  # Reset .data
                return

            self.data.append(field.text())

        if not self.data:
            return

        super().accept()
